1.N-Queens

class Solution {
    public List<String> addition(char ch[][]){
        List < String > res = new ArrayList < String > ();
        for(int i=0;i<ch.length;i++){
        String row= new String(ch[i]);
        res.add(row);
        }
        return res;
    }
    public void solve(char ch[][],List<List<String>> ans,boolean []colm, boolean []normalDig,boolean []reverseDig,int row){
        if(row==ch.length){
            ans.add(addition(ch));
            return;
        }
        for(int col=0; col<ch.length; col++){
            if(colm[col]==false && normalDig[row+col]==false && reverseDig[row-col+ch.length-1]==false){
                ch[row][col]='Q';
                colm[col]=true;
                normalDig[row+col]=true;
                reverseDig[row-col+ch.length-1]=true;
                solve(ch,ans,colm,normalDig,reverseDig,row+1);
                ch[row][col]='.';
                colm[col]=false;
                normalDig[row+col]=false;
                reverseDig[row-col+ch.length-1]=false;
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        char ch[][]=new char[n][n];
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                ch[i][j] = '.';
            }
          }
        List<List<String>> ans=new ArrayList<>();

        boolean []col=new boolean[n];
        boolean []normalDig=new boolean[2*n-1];
        boolean []reverseDig=new boolean[2*n-1];

        solve(ch,ans,col,normalDig,reverseDig,0);
        return ans;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Sudoku Solver

class Solution {
    public void solveSudoku(char[][] board) {
        if(board==null || board.length==0)return ;
        solve(board);
    }

    public boolean solve(char[][] board){
         for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == '.'){
                    for(char c = '1'; c <= '9'; c++){//trial. Try 1 through 9
                        if(isValid(board, i, j, c)){
                            board[i][j] = c; //Put c for this cell
                            
                            if(solve(board))
                                return true; //If it's the solution return true
                            else
                                board[i][j] = '.'; //Otherwise go back
                        }
                    }
                    
                    return false;
                }
            }
        }
        return true;
}
    private boolean isValid(char[][] board,int row ,int col,char c){
            int regionRow = 3 * (row / 3);  //region start row
        int regionCol = 3 * (col / 3);    //region start col
        for (int i = 0; i < 9; i++) {
            if (board[i][col] == c) return false; //check row
            if (board[row][i] == c) return false; //check column
            if (board[regionRow + i / 3][regionCol + i % 3] == c) return false; //check 3*3 block
        }
        return true;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Rat Maze

import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
    public static int  solve( int arr[][],int row ,int col,boolean[][]visited){
        if(row<0 || row==arr.length || col<0 || col==arr.length ||arr[row][col]==1 || visited[row][col]){
            return 0;
        }
        
        if(row==arr.length-1 && col==arr.length-1){
            return 1;
        }
        int count=0;
        visited[row][col] = true;
        count+= solve(arr,row-1,col,visited);
        count+= solve(arr,row,col-1,visited);
        count+= solve(arr,row+1,col,visited);
        count+= solve(arr,row,col+1,visited);
        visited[row][col] = false;
        
        return count;
    }
	public static void main (String[] args) throws java.lang.Exception
	{
	 Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int arr[][] = new int[n][n];
		for(int i=0;i<n;i++){
		    for(int j=0;j<n;j++){
		        arr[i][j] = sc.nextInt();
		    }
		}
	
	  boolean[][]visited = new boolean[n][n];
	  int count = solve(arr,0,0,visited);
	  System.out.print(count);
	}
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Combination Sum

class Solution {
    public void combination(int[] candidates,List<Integer> currList,List<List<Integer>> finalList,int currSum,int ind,int target){
        if(currSum>target || currSum < 0)return;
        
        if(currSum==target){
          finalList.add(new ArrayList<>(currList));
          return;  
        }
        for(int i=ind;i<candidates.length;i++){
            currList.add(candidates[i]);
            currSum+=candidates[i];
            combination(candidates,currList,finalList,currSum,i,target);
            currList.remove(currList.size()-1);
            currSum-=candidates[i];
        }
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> finalList = new ArrayList<>();
        //  Arrays.sort(candidates);
        combination(candidates, new ArrayList<>(),finalList,0,0,target);
        return finalList;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Combination Sum 2

class Solution {
    private static void findCombination(int[] candidates, List<List<Integer>> finalList, List<Integer> currList, int ind, int currSum,
			int target) {
		
		 if(currSum>target)return;
	     if(currSum < 0) return;
	     if(currSum==target){
	       finalList.add(new ArrayList<>(currList));
	       return;  
	     }
	     for(int i=ind;i<candidates.length;i++){
	    	 if(i > ind && candidates[i] == candidates[i-1]) continue;
	         currList.add(candidates[i]);
	         currSum+=candidates[i];
	         findCombination(candidates,finalList,currList,i+1,currSum,target);
	         currList.remove(currList.size()-1);
	         currSum-=candidates[i];
	     }
	}
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> finalList=new ArrayList<>();
				Arrays.sort(candidates);
		findCombination(candidates,finalList,new ArrayList<>(),0,0,target);
		return finalList;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
